-------------------------------------------------------------------------
IMPLEMENTING PROMISE-BASED API
-------------------------------------------------------------------------
Using an alarm() API
We take the name of person, the delay for alarm, and send a wake up message.

setTimeout() is utilized for the alarm() function. 
-------------------------------------------------------------------------

            const output = document.querySelector('#output');
            const button = document.querySelector('#set-alarm');

            function setAlarm() {
            setTimeout(() => {
                output.textContent = 'Wake up!';
            }, 1000);
            }

            button.addEventListener('click', setAlarm);

-------------------------------------------------------------------------
Implemented error checks and if the time is not negative.
-------------------------------------------------------------------------

            ...
            function alarm(person, delay) {
            return new Promise((resolve, reject) => {
                if (delay < 0) {
                throw new Error('Alarm delay must not be negative');
                }
                setTimeout(() => {
                resolve(`Wake up, ${person}!`);
                }, delay);
            });
            }

            button.addEventListener('click', () => {
            alarm(name.value, delay.value)
                .then((message) => output.textContent = message)
                .catch((error) => output.textContent = `Couldn't set alarm: ${error}`);
            });

-------------------------------------------------------------------------
Since alarm() returns a Promise you can promise chain it or anything else 
you would do to any other promise.
-------------------------------------------------------------------------

            ...
            function alarm(person, delay) {
            return new Promise((resolve, reject) => {
                if (delay < 0) {
                throw new Error('Alarm delay must not be negative');
                }
                setTimeout(() => {
                resolve(`Wake up, ${person}!`);
                }, delay);
            });
            }

            button.addEventListener('click', async () => {
            try {
                const message = await alarm(name.value, delay.value);
                output.textContent = message;
            }
            catch (error) {
                output.textContent = `Couldn't set alarm: ${error}`;
            }
            });
